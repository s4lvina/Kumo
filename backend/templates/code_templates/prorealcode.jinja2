{# 
ProRealCode Template
Genera código para ProRealTime
#}
// ================================================================
// Strategy: {{ strategy.name }}
// Generated by Kumo - Trading Strategy Designer
// Target: ProRealTime
// ================================================================

DEFPARAM CumulateOrders = False // Una posición a la vez

// ================================================================
// PARÁMETROS DE LA ESTRATEGIA
// ================================================================

{% if strategy.variables %}
// Variables personalizadas
{% for var in strategy.variables %}
{% if var.enabled %}
{{ var.name }} = {{ var.value }}
{% endif %}
{% endfor %}
{% endif %}

// Position Sizing
{% if strategy.positionSizing %}
{% if strategy.positionSizing.type == 'fixed_lots' %}
PositionSize = {{ strategy.positionSizing.value }}
{% elif strategy.positionSizing.type == 'percent_balance' %}
PositionSize = ROUND(CAPITAL * {{ strategy.positionSizing.value / 100 }} / Close)
{% elif strategy.positionSizing.type == 'risk_percent' %}
RiskPercent = {{ strategy.positionSizing.value }}
PositionSize = 1 // Calculado dinámicamente con Stop Loss
{% endif %}
{% else %}
PositionSize = 1
{% endif %}

// ================================================================
// INDICADORES
// ================================================================

// Indicadores automáticamente detectados en las reglas
{% if strategy.entryBlocks or strategy.exitBlocks %}
{% set indicators_used = [] %}
{% for block in strategy.entryBlocks %}
  {% for rule in block.rules %}
    {% if rule.indicator %}
      {% if rule.indicator.indicator == 'sma' %}
{{ rule.indicator.label | replace('(', '_') | replace(')', '') | replace(',', '_') }} = Average[{{ rule.indicator.parameters.period }}](Close)
      {% elif rule.indicator.indicator == 'ema' %}
{{ rule.indicator.label | replace('(', '_') | replace(')', '') | replace(',', '_') }} = ExponentialAverage[{{ rule.indicator.parameters.period }}](Close)
      {% elif rule.indicator.indicator == 'rsi' %}
{{ rule.indicator.label | replace('(', '_') | replace(')', '') | replace(',', '_') }} = RSI[{{ rule.indicator.parameters.period }}](Close)
      {% elif rule.indicator.indicator == 'macd' %}
MACDLine, SignalLine = MACD[{{ rule.indicator.parameters.fast_period }},{{ rule.indicator.parameters.slow_period }},{{ rule.indicator.parameters.signal_period }}](Close)
      {% elif rule.indicator.indicator == 'bollinger' %}
UpperBand, LowerBand, MiddleBand = BollingerBands[{{ rule.indicator.parameters.period }}, {{ rule.indicator.parameters.deviation }}](Close)
      {% elif rule.indicator.indicator == 'atr' %}
{{ rule.indicator.label | replace('(', '_') | replace(')', '') | replace(',', '_') }} = AverageTrueRange[{{ rule.indicator.parameters.period }}](Close)
      {% elif rule.indicator.indicator == 'adx' %}
{{ rule.indicator.label | replace('(', '_') | replace(')', '') | replace(',', '_') }} = ADX[{{ rule.indicator.parameters.period }}]
      {% elif rule.indicator.indicator == 'stochastic' %}
%K, %D = Stochastic[{{ rule.indicator.parameters.k_period }}, {{ rule.indicator.parameters.d_period }}](Close)
      {% endif %}
    {% endif %}
  {% endfor %}
{% endfor %}
{% for block in strategy.exitBlocks %}
  {% for rule in block.rules %}
    {% if rule.indicator %}
      {% if rule.indicator.indicator == 'sma' %}
{{ rule.indicator.label | replace('(', '_') | replace(')', '') | replace(',', '_') }} = Average[{{ rule.indicator.parameters.period }}](Close)
      {% elif rule.indicator.indicator == 'ema' %}
{{ rule.indicator.label | replace('(', '_') | replace(')', '') | replace(',', '_') }} = ExponentialAverage[{{ rule.indicator.parameters.period }}](Close)
      {% elif rule.indicator.indicator == 'rsi' %}
{{ rule.indicator.label | replace('(', '_') | replace(')', '') | replace(',', '_') }} = RSI[{{ rule.indicator.parameters.period }}](Close)
      {% elif rule.indicator.indicator == 'macd' %}
MACDLine, SignalLine = MACD[{{ rule.indicator.parameters.fast_period }},{{ rule.indicator.parameters.slow_period }},{{ rule.indicator.parameters.signal_period }}](Close)
      {% elif rule.indicator.indicator == 'bollinger' %}
UpperBand, LowerBand, MiddleBand = BollingerBands[{{ rule.indicator.parameters.period }}, {{ rule.indicator.parameters.deviation }}](Close)
      {% elif rule.indicator.indicator == 'atr' %}
{{ rule.indicator.label | replace('(', '_') | replace(')', '') | replace(',', '_') }} = AverageTrueRange[{{ rule.indicator.parameters.period }}](Close)
      {% elif rule.indicator.indicator == 'adx' %}
{{ rule.indicator.label | replace('(', '_') | replace(')', '') | replace(',', '_') }} = ADX[{{ rule.indicator.parameters.period }}]
      {% elif rule.indicator.indicator == 'stochastic' %}
%K, %D = Stochastic[{{ rule.indicator.parameters.k_period }}, {{ rule.indicator.parameters.d_period }}](Close)
      {% endif %}
    {% endif %}
  {% endfor %}
{% endfor %}
{% endif %}

// ================================================================
// CONDICIONES DE ENTRADA
// ================================================================

{% if strategy.entryBlocks %}
{% for block in strategy.entryBlocks %}
{% if block.enabled %}

// {{ block.name }}
EntryCondition{{ loop.index }} = 1
{% for rule in block.rules %}
{% if rule.indicator %}
{% set indicator_ref = rule.indicator.label | replace('(', '_') | replace(')', '') | replace(',', '_') %}
{% if rule.comparisonValue.type == 'number' %}
EntryCondition{{ loop.index }} = EntryCondition{{ loop.index }} AND {{ indicator_ref }} {{ rule.condition | replace('greater_than', '>') | replace('less_than', '<') | replace('equal_to', '=') | replace('crosses_above', '>') | replace('crosses_below', '<') }} {{ rule.comparisonValue.numericValue }}
{% elif rule.comparisonValue.type == 'variable' %}
{% set var_name = rule.comparisonValue.variableReference.variableName %}
EntryCondition{{ loop.index }} = EntryCondition{{ loop.index }} AND {{ indicator_ref }} {{ rule.condition | replace('greater_than', '>') | replace('less_than', '<') | replace('equal_to', '=') }} {{ var_name }}
{% elif rule.comparisonValue.type == 'indicator' %}
{% set comp_indicator = rule.comparisonValue.indicatorValue.label | replace('(', '_') | replace(')', '') | replace(',', '_') %}
EntryCondition{{ loop.index }} = EntryCondition{{ loop.index }} AND {{ indicator_ref }} {{ rule.condition | replace('greater_than', '>') | replace('less_than', '<') | replace('equal_to', '=') | replace('crosses_above', '>') | replace('crosses_below', '<') }} {{ comp_indicator }}
{% endif %}
{% endif %}
{% endfor %}

{% for action in block.actions %}
{% if action.action == 'market_buy' %}
IF EntryCondition{{ loop.index }} AND NOT LONGONMARKET THEN
    BUY PositionSize CONTRACT AT MARKET
ENDIF
{% elif action.action == 'market_sell' %}
IF EntryCondition{{ loop.index }} AND NOT SHORTONMARKET THEN
    SELLSHORT PositionSize CONTRACT AT MARKET
ENDIF
{% endif %}
{% endfor %}

{% endif %}
{% endfor %}
{% endif %}

// ================================================================
// CONDICIONES DE SALIDA
// ================================================================

{% if strategy.exitBlocks %}
{% for block in strategy.exitBlocks %}
{% if block.enabled %}

// {{ block.name }}
ExitCondition{{ loop.index }} = 1
{% for rule in block.rules %}
{% if rule.indicator %}
{% set indicator_ref = rule.indicator.label | replace('(', '_') | replace(')', '') | replace(',', '_') %}
{% if rule.comparisonValue.type == 'number' %}
ExitCondition{{ loop.index }} = ExitCondition{{ loop.index }} AND {{ indicator_ref }} {{ rule.condition | replace('greater_than', '>') | replace('less_than', '<') | replace('equal_to', '=') | replace('crosses_above', '>') | replace('crosses_below', '<') }} {{ rule.comparisonValue.numericValue }}
{% elif rule.comparisonValue.type == 'variable' %}
{% set var_name = rule.comparisonValue.variableReference.variableName %}
ExitCondition{{ loop.index }} = ExitCondition{{ loop.index }} AND {{ indicator_ref }} {{ rule.condition | replace('greater_than', '>') | replace('less_than', '<') | replace('equal_to', '=') }} {{ var_name }}
{% elif rule.comparisonValue.type == 'indicator' %}
{% set comp_indicator = rule.comparisonValue.indicatorValue.label | replace('(', '_') | replace(')', '') | replace(',', '_') %}
ExitCondition{{ loop.index }} = ExitCondition{{ loop.index }} AND {{ indicator_ref }} {{ rule.condition | replace('greater_than', '>') | replace('less_than', '<') | replace('equal_to', '=') | replace('crosses_above', '>') | replace('crosses_below', '<') }} {{ comp_indicator }}
{% endif %}
{% endif %}
{% endfor %}

{% for action in block.actions %}
{% if action.action == 'close_position' %}
IF ExitCondition{{ loop.index }} THEN
    IF LONGONMARKET THEN
        SELL AT MARKET
    ENDIF
    IF SHORTONMARKET THEN
        EXITSHORT AT MARKET
    ENDIF
ENDIF
{% endif %}
{% endfor %}

{% endif %}
{% endfor %}
{% endif %}

// ================================================================
// GESTIÓN DE RIESGO
// ================================================================

{% if strategy.stopLoss and strategy.stopLoss.enabled %}
// Stop Loss
{% if strategy.stopLoss.type == 'pips' %}
SET STOP %LOSS {{ strategy.stopLoss.value }}
{% elif strategy.stopLoss.type == 'percentage' %}
SET STOP %LOSS {{ strategy.stopLoss.value }}
{% elif strategy.stopLoss.type == 'atr' %}
IF LONGONMARKET THEN
    SELL AT MARKET STOP Close - ({{ strategy.stopLoss.value }} * ATR_14)
ENDIF
IF SHORTONMARKET THEN
    EXITSHORT AT MARKET STOP Close + ({{ strategy.stopLoss.value }} * ATR_14)
ENDIF
{% endif %}
{% endif %}

{% if strategy.takeProfit and strategy.takeProfit.enabled %}
// Take Profit
{% if strategy.takeProfit.type == 'pips' %}
SET TARGET %PROFIT {{ strategy.takeProfit.value }}
{% elif strategy.takeProfit.type == 'percentage' %}
SET TARGET %PROFIT {{ strategy.takeProfit.value }}
{% elif strategy.takeProfit.type == 'ratio' %}
// Take Profit con ratio R:R
{% if strategy.stopLoss and strategy.stopLoss.enabled %}
TPDistance = {{ strategy.stopLoss.value }} * {{ strategy.takeProfit.value }}
SET TARGET %PROFIT TPDistance
{% endif %}
{% endif %}
{% endif %}

{% if strategy.trailingStop and strategy.trailingStop.enabled %}
// Trailing Stop
SET STOP TRAILING {{ strategy.trailingStop.distance }}
{% endif %}

// ================================================================
// INFORMACIÓN DE LA ESTRATEGIA
// ================================================================

// Timeframe: {{ strategy.timeframe }}
// Created: {{ strategy.createdAt if strategy.createdAt else 'N/A' }}
// 
// IMPORTANTE:
// - Este código es una base generada automáticamente
// - Revisa y ajusta los parámetros según tu mercado
// - Prueba en demo antes de operar real
// - ProRealTime puede requerir ajustes sintácticos específicos
// 
// ================================================================

